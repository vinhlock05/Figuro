// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table
model User {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(100)
  email          String   @unique @db.VarChar(255)
  passwordHash   String   @map("password_hash") @db.VarChar(255)
  phone          String?  @db.VarChar(20)
  emailVerified  Boolean  @default(false) @map("email_verified")
  socialProvider String?  @map("social_provider") @db.VarChar(50)
  socialId       String?  @map("social_id") @db.VarChar(255)
  role           String   @default("customer") @db.VarChar(20)
  createdAt      DateTime @default(now()) @map("created_at")
  resetToken           String?   @db.VarChar(255)
  resetTokenExpires    DateTime?
  verificationToken    String?   @db.VarChar(255)

  // Relations
  cart           Cart?
  orders         Order[]
  notifications  Notification[]
  voiceAgentContexts VoiceAgentContext[]
  wishlist       Wishlist[]

  @@map("users")
}

// Categories table
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?

  // Relations
  products    Product[]

  @@map("categories")
}

// Products table
model Product {
  id                  Int       @id @default(autoincrement())
  name                String    @db.VarChar(255)
  description         String?
  price               Decimal   @db.Decimal(12, 2)
  imageUrl            String?   @map("image_url")
  isCustomizable      Boolean   @default(false) @map("is_customizable")
  stock               Int?
  productionTimeDays  Int?      @map("production_time_days")
  categoryId          Int?      @map("category_id")
  slug                String?   @unique @db.VarChar(255)
  createdAt           DateTime  @default(now()) @map("created_at")

  // Relations
  category            Category? @relation(fields: [categoryId], references: [id])
  customizationOptions CustomizationOption[]
  cartItems           CartItem[]
  orderItems          OrderItem[]
  wishlistItems       Wishlist[]

  @@map("products")
}

// Product Customization Options
model CustomizationOption {
  id          Int      @id @default(autoincrement())
  productId   Int      @map("product_id")
  optionType  String   @map("option_type") @db.VarChar(50)
  optionValue String   @map("option_value") @db.VarChar(100)
  priceDelta  Decimal  @default(0) @map("price_delta") @db.Decimal(12, 2)

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, optionType, optionValue])
  @@map("customization_options")
}

// Shopping Cart
model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique @map("user_id")
  createdAt DateTime   @default(now()) @map("created_at")

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id            Int      @id @default(autoincrement())
  cartId        Int      @map("cart_id")
  productId     Int      @map("product_id")
  quantity      Int
  customizations Json?
  price         Decimal  @db.Decimal(12, 2)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  cart          Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

// Orders
model Order {
  id             Int      @id @default(autoincrement())
  userId         Int?     @map("user_id")
  status         String   @db.VarChar(50)
  totalPrice     Decimal  @map("total_price") @db.Decimal(12, 2)
  shippingAddress String  @map("shipping_address")
  paymentMethod  String   @map("payment_method") @db.VarChar(50)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  user           User?    @relation(fields: [userId], references: [id])
  items          OrderItem[]
  payments       Payment[]
  statusHistory  OrderStatusHistory[]

  @@map("orders")
}

model OrderItem {
  id            Int      @id @default(autoincrement())
  orderId       Int      @map("order_id")
  productId     Int      @map("product_id")
  quantity      Int
  customizations Json?
  price         Decimal  @db.Decimal(12, 2)

  // Relations
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Payments
model Payment {
  id            Int       @id @default(autoincrement())
  orderId       Int       @map("order_id")
  paymentGateway String   @map("payment_gateway") @db.VarChar(50)
  amount        Decimal   @db.Decimal(12, 2)
  status        String    @db.VarChar(50)
  transactionId String?   @map("transaction_id") @db.VarChar(255)
  paidAt        DateTime? @map("paid_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Order Tracking
model OrderStatusHistory {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  status    String   @db.VarChar(50)
  updatedAt DateTime @default(now()) @map("updated_at")

  // Relations
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

// Voice Agent Context
model VoiceAgentContext {
  id              Int      @id @default(autoincrement())
  userId          Int?     @map("user_id")
  sessionId       String   @map("session_id") @db.VarChar(255)
  context         Json?
  lastInteraction DateTime @default(now()) @map("last_interaction")

  // Relations
  user            User?    @relation(fields: [userId], references: [id])

  @@map("voice_agent_contexts")
}

// Email/SMS Notifications
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String   @db.VarChar(50)
  content   String
  status    String   @default("pending") @db.VarChar(20)
  sentAt    DateTime @default(now()) @map("sent_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// Wishlist
model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist")
}
