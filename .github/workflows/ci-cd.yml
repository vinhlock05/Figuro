name: ci-cd

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend:
    name: Frontend (build/lint)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
      - run: npm run lint --if-present
      - run: npm run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  backend:
    name: Voice Agent (lint/test/build/push)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: voice-agent
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('voice-agent/**/requirements*.txt') }}
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black mypy bandit pytest
      - run: flake8 .
      - run: black --check .
      - run: mypy . || true
      - run: pytest -q || true
      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/voice-agent:${{ github.sha }} .
      - name: Login to GHCR
        if: github.event_name == 'push'
        run: echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        if: github.event_name == 'push'
        run: |
          docker push ghcr.io/${{ github.repository }}/voice-agent:${{ github.sha }}

  docker_frontend:
    name: Frontend Docker build/push
    runs-on: ubuntu-latest
    needs: frontend
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/frontend:${{ github.sha }} .
      - name: Login to GHCR
        if: github.event_name == 'push'
        run: echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        if: github.event_name == 'push'
        run: |
          docker push ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}

  api_backend:
    name: API Backend (build/push)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Build image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/backend:${{ github.sha }} .
      - name: Login to GHCR
        if: github.event_name == 'push'
        run: echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        if: github.event_name == 'push'
        run: |
          docker push ghcr.io/${{ github.repository }}/backend:${{ github.sha }}

  deploy:
    name: Deploy (optional)
    needs: [frontend, backend, docker_frontend, api_backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deploy frontend to Vercel
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.ENABLE_VERCEL_DEPLOY == 'true' }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npm i -g vercel@latest
          vercel pull --yes --environment=production --token "$VERCEL_TOKEN"
          vercel build --prod --token "$VERCEL_TOKEN"
          vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"
      - name: Trigger backend deploy hook (Render)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && vars.ENABLE_RENDER_DEPLOY == 'true' }}
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          curl -X POST "$RENDER_DEPLOY_HOOK"

